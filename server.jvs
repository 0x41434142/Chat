
// Import de package
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;
import java.io.PrintWriter;
import java.awt.image.*;
import java.awt.*;
import javax.imageio.ImageIO;
import java.io.*;
import javax.swing.*;
import javax.swing.text.*;
import javax.swing.text.html.*;
import java.awt.event.*;
import java.util.*;


/* Création de notre classe dérivant de la classe Thread
 *  permettant de créer des taches qui s'executent de façon
 *  asynchrone évitant de bloquer la fenetre principale.
 */
public class Serveur extends Thread implements ActionListener, KeyListener, WindowListener
{
	// déclaration de variable de classe 
	private ServerSocket socketserver ;
	public Socket socketduserveur;
	private BufferedReader in;
	private PrintWriter out;
	private JFrame fenetre; 
	private JTextPane textArea;
	private JButton deconnexion;
	private JButton fileInput;
	private JButton wizz;
	private String host;
	private int port = 12000;
	private HTMLDocument doc;
	private JButton send;
	private JTextArea userText;
	private OutputStream o;
	private boolean isUserConnected = false;
	public boolean socketOpen =false;
	private JOptionPane dialog = new JOptionPane();
	
	Serveur() {
		/* Mise en place de l'interface graphiqueg race à la bibliotheque 
		 *  fournie nous permettant de créer des fenetres, d'y ajouter
		 *  des widgets etc		 *  
		 */
		fenetre = new JFrame();
		fenetre.setSize(600, 600);
		fenetre.setTitle("Serveur");
		fenetre.setLocationRelativeTo(null);
		fenetre.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
		fenetre.getContentPane().setLayout(new BorderLayout());	
		//------- Création du header -------------------	
		JPanel content = new JPanel();		
		content.setLayout(new GridBagLayout());	
		// Créations des widgets
		JLabel labelIP = new JLabel("Adrrese IP du serveur");
		getHost();
		JLabel IP = new JLabel(host);
		JLabel labelPort = new JLabel("Port du serveur");
		JLabel PORT = new JLabel(Integer.toString(port));
		// Ajout des widgets
		GridBagConstraints gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		gbc.insets = new Insets(10, 10, 10, 10);
   		content.add(labelIP, gbc);
   		gbc.gridx = 1;
   		content.add(IP, gbc);
   		gbc.gridx = 2;
   		content.add(labelPort, gbc);
   		gbc.gridx = 3;
   		content.add(PORT, gbc);
		//-------- Création de l'affichage -----------
		textArea = new JTextPane();
		textArea.setContentType("text/html");
		textArea.setEditable(false);
		Font font = new Font("Serif", Font.ITALIC, 45);
		textArea.setFont(font);
		JScrollPane scroll = new JScrollPane(textArea);
		//------- Création de l'entrée utilisateur ---
		JPanel userIN = new JPanel();
		userIN.setLayout(new GridBagLayout());
		// Création des widgets
		deconnexion = new JButton("Déconnexion");
		deconnexion.addActionListener(this);
		fileInput = new JButton("Envoyer une image");
		fileInput.addActionListener(this);
		send = new JButton("Envoyer");
		send.addActionListener(this);
		userText = new JTextArea(5, 20);
		userText.setMargin(new Insets(5, 5, 5, 5));
		userText.addKeyListener(this);
		JButton clean = new JButton("Nettoyer");
		clean.addActionListener(this);
		wizz = new JButton("Wizz");
		wizz.addActionListener(this);
		// Ajout des widgets sur le layout userIN
		GridBagConstraints gbcUser = new GridBagConstraints();
		gbcUser.gridx = 0;
		gbcUser.gridy = 0;
		gbcUser.insets = new Insets(10, 10, 10, 10);
		userIN.add(deconnexion, gbcUser);	
		gbcUser.gridx = 1;
		userIN.add(clean, gbcUser);		
		gbcUser.gridx = 2;			
		userIN.add(wizz, gbcUser);		
		gbcUser.gridx = 3;				
		userIN.add(fileInput, gbcUser);	
		gbcUser.gridx = 4;		
		userIN.add(send, gbcUser);
		gbcUser.insets = new Insets(0, 10, 10, 10);
		gbcUser.fill = GridBagConstraints.HORIZONTAL;
		gbcUser.gridy = 1;
		gbcUser.gridx = 0;
		gbcUser.weightx = 1.0;	
		gbcUser.gridwidth = 6;
		userIN.add(userText, gbcUser);	
		//------ Ajout des panels sur le layout principal -----
		// header
		fenetre.getContentPane().add(content, BorderLayout.NORTH);
		// zone d'affichage
		fenetre.getContentPane().add(scroll, BorderLayout.CENTER);
		// entrée utilisateur
		fenetre.getContentPane().add(userIN, BorderLayout.SOUTH);		
		// on active la fenetre et on appel la fonction pour essayer d'ouvrir un port
		// et on désactive les boutons
		changeButton(false);
		fenetre.setVisible(true);
		serveurInitialisation();		
		fenetre.addWindowListener(this);
	}

	// Fonction principale permettant d'afficher les msg reçus
	//et de connecter les utilisateurs
	public void run()
	{					
		try
		{
			while(true)
			{
				// Quelqu'un se connecte
				socketduserveur = socketserver.accept(); 
				isUserConnected = true;
				send.setEnabled(true);
				String userIP = socketduserveur.getLocalAddress().toString();
				String userPort = Integer.toString(socketduserveur.getPort());
				String userHeader = "<font color='#FF0000' ><b>" + userIP+"</b></font> : ";
				write("<b><i>" +userIP  + ":" + userPort + " est connecté <br /><br /></i></b>");
				// On réactive les boutons
				changeButton(true);
			
				// on attend un message quelconque
				while(true)
				{									
					in = new BufferedReader(new InputStreamReader(socketduserveur.getInputStream()));
					String msg = in.readLine();

					// Si c'est un message de déconnexion 
					if (msg.equals("close"))
					{
						write("<b><i>" +userIP  + ":" + userPort + " est déconnecté <br /><br /></i></b>");
						changeButton(false);
						socketduserveur.close();
						isUserConnected = false;
						break;
					}
					// Si c'est une image
					else if(msg.equals("IMG"))
					{
						/* nous avons choisis de ne pas créer d'autres
						 *  threads pour la réception d'image. Le programme 
						 *  peut alors bloquer lors de la réception d'images
						 *  volumineuse
						 */
						 						
						// On récupére le flux de byte et on stock dans une var adaptée
						BufferedImage image = ImageIO.read(socketduserveur.getInputStream());
						// On ouvre un fichier qui va recevoir l'image
						File outputfile = new File("tmp.png");
						//on écrit dedans
						ImageIO.write(image, "png", outputfile);
						// On récupére ce qui reste dans le flux car il peut rester des débris non affichable
						in = new BufferedReader(new InputStreamReader(socketduserveur.getInputStream()));
						String trash = in.readLine();
						// On récuper l'interface d'affichage et on ajoute l'image 
						doc = (HTMLDocument) textArea.getStyledDocument();
						String data = "<img src=\"file:///"+outputfile.getAbsolutePath()+"\" alt='erreur'><br />";
						write(userHeader+ "<br />");
						write(data);
											
					}
					// si on recoit un wizz
					else if(msg.equals("messagequifaitbougerlecran"))
					{
						// Appel fonction wizzz
						wizzz();
					}
					// Si c'est un simple message texte on l'affiche
					else if(msg != null)
					{
						doc = (HTMLDocument) textArea.getStyledDocument();
						write(userHeader + msg+"<br />");							
					}
				}
			}    
	 	}
	 	// On récupere les erreurs
	 	catch (IOException e)		 
		{
			e.printStackTrace();
		}
	}

	// Fonction qui initialise le serveur
	public void serveurInitialisation()
	{		
		// On met la fenetre sur "écoute" pour surveiller son statut
		// Tentative de créer le serveur avec ouverture d'1 port
		try {
			socketserver = new ServerSocket(port);
			fenetre.setTitle("Serveur en ligne sur  " + +socketserver.getLocalPort());
			socketOpen = true;
		 // Si y a une érreur on la récupère
		}catch (IOException e)
		{
			fenetre.setTitle("Serveur hors ligne");
			displayDial("Erreur", "Impossible d'ouvrir le port. \n\n Port déjà utilisé ou bloqué par firewall", JOptionPane.ERROR_MESSAGE);
		}
	}

	// Fonction qui attend un click sur un boutton
	public void actionPerformed(ActionEvent arg0)
	{
		// On regarde quel bouton a été clique
		// ---- ici bouton pour envoyer une image ----
		if(arg0.getActionCommand().equals("Envoyer une image"))
		{
			// On récuper l'image grace à une fonction java
			JFileChooser fileChooser = new JFileChooser();
			// si ça a marché
			if (fileChooser.showOpenDialog(fileChooser) == JFileChooser.APPROVE_OPTION)
			{	// on récuper l'image et on la passe en parametre à une fonction 
				// qui se charge de l'envoyer
				File file = fileChooser.getSelectedFile();
				double fileSize = file.length()/1024/1024;
				if(fileSize <= 2)
				{
					if(file.getName().lastIndexOf(".") > 0)
					{
						String ext = file.getName().substring(file.getName().lastIndexOf("."));
						String authorized[] = {".png", ".jpg", ".jpeg", ".gif"};
						if(Arrays.asList(authorized).contains(ext))
						{
							sendImage(file);
						}
						else
						displayDial("Extension non autorisée", "png, jpg, jpeg ou gif uniquement",JOptionPane.WARNING_MESSAGE); 
					}
				}	
				else
				displayDial("Fichier trop volumineux", "Maximum 2Mo",JOptionPane.WARNING_MESSAGE); 	  
			}
		}
		// ---- Si c'est le bouton d'envoie ----
		else if(arg0.getActionCommand().equals("Envoyer"))
		{
			// appel de la fonction d'envoie
			send();			
		}
		// ---- Si c'est le bouton de nettoyage ----
		else if(arg0.getActionCommand().equals("Nettoyer"))
		{
			// appel de la fonction de nettoyage
			clean();
		}
		// ---- Si c'est le bouton de déconnexin ----
		else if(arg0.getActionCommand().equals("Déconnexion"))
		{
			// appel de la fonction de déconnexion
			deconnexion();
		}
		else if(arg0.getActionCommand().equals("Wizz"))
		{
			// on envoie un wizz
			send("messagequifaitbougerlecran");
			
		}
	}

	// fonction d'envoie d'image
	public void sendImage(File file)
	{
		// Cette fonction est en deux parties 1) envoie 2) affichage.
		
		// On récupéer la zone d'affichage pour pouvoir afficher l'image plus tard
			doc = (HTMLDocument) textArea.getStyledDocument();
		try
		{
			/* récupération du flux de sortie grace à une méthode
			* création d'une classe permettant de faire de 
			* l'écriture sous forme de text
			*/
			out = new PrintWriter(socketduserveur.getOutputStream());
			out.println("IMG");
			// on envoie un msg IMG pour prévenir que le flux qui va arriver n'est
			// pas du texte mais des bytes
			out.flush();
			//on utilise le flux sortie mais cette fois en brute
			o = socketduserveur.getOutputStream();
			// on récupére notre fichier dans un buffer spécifique aux image
			BufferedImage image = ImageIO.read(file);
			// on écrit notre buffer sur le flux sortant
			ImageIO.write(image , "PNG", o);
			println("image writed");
			/* Affichage de l'image dans notre propre zone d'affichage.
			 *  la zone d'affichage accepete le HTML cela nous permet d'utiliser
			 *  les balises de ce langage pour mettre en forme nos données
			 */
			// On crée une string contenant la balise HTML img
			String img = "<img src=\"file:///"+file.getAbsolutePath()+"\" alt='erreur' /><br />";
			write("<b>"+host+"</b> : <br />\n");
			// On affiche l'image grâce à une fonction write()
			write(img);
			/* le flux de sortie reste en attente car ImageIO n'envoie pas de EOF (end of file)
			 *  alors on envoie un message vide qui lui contient un EOF
			 *  Si on ne le fait pas la connexion sera jamais fermée (toujours en attente car pas 
			 *  de eof) 
			 */			
			out.println(""); // ajout de l'eof (\r\n)
			//on "envoie" le flux sortant
			out.flush();
		}catch(IOException e){println("e");}
	}

	// Fonction de déconnexion
	public void deconnexion()
	{
		// on désactive les boutons
		changeButton(false);
		
		/*  on envoie un msg de déconnexion
		 *  ici on ne ferme pas la liaison car suite à ce message le client 
		 *  va renvoyer un message de déconnexion. On s'assure ainsi que le client 
		 *  est bien déconnecté avant de la fermer
		 */	
		 send("close");	
			
	}

	// Fonction qui envoie un msg au client
	public void send()
	{
		// on récupere le texte de la zone d'entrée
		String data =  userText.getText();
		try
		{
			out = new PrintWriter(socketduserveur.getOutputStream());
			write("<b>"+host+"</b> : " + data+ "<br />");
			// on envoie le message au client
			out.println(data);
			out.flush();
			// on vide la zone de texte
			userText.setText("");
		}
		catch(IOException e){}		
	}	

	// Fonction qui trouve l'adresse IP de la machine
	public void getHost()
	{
		try
		{
			host = InetAddress.getLocalHost().toString();
		}
		catch(UnknownHostException e){}		
	}

	// Fonction qui inscrit des données dans la zone
	public void write(String data)
	{
		// on récupere la zone d'affichage
		doc = (HTMLDocument) textArea.getStyledDocument();
		try
		{ 
			/* insertAfterEnd(int position, String data)
			/* on récupere la taille des données déja présente
			 *  pour écrire après celle ci
			 */			 
			 doc.insertAfterEnd(doc.getCharacterElement(doc.getLength()), data+"\n");
		}
		catch(BadLocationException e){}
		catch(IOException e){}
	}

	/* Fonction qui récuper les touches du clavier
	 *  plusieurs sont disponible en fonction du 
	 *  statut de la touche. Ici on s'interesse au 
	 *  moment ou la touche est préssée
	 */
	public void keyReleased(KeyEvent e){}	
	public void keyTyped(KeyEvent e){}
	public void keyPressed(KeyEvent e)	
	{
		// On récupere l'id de la touche et on vérifie que 
		// c'est bien la touche entrée		
		if(e.getKeyCode() == KeyEvent.VK_ENTER)
		{
			send();
		}
	}

	/* Fonctions qui surveille l'état de la fenetre
	 *  plusieurs sont disponibles mais on 
	 *  s'interesse uniquement à l'evenement
	 *  de fermeture de fenetre
	 */
	public void windowActivated(java.awt.event.WindowEvent e) {}
	public void windowClosed(java.awt.event.WindowEvent e) {}	
	public void windowDeactivated(java.awt.event.WindowEvent e) {}
	public void windowDeiconified(java.awt.event.WindowEvent e) {}
	public void windowIconified(java.awt.event.WindowEvent e) {}
	public void windowOpened(java.awt.event.WindowEvent e) {}
	public void windowClosing(java.awt.event.WindowEvent e) {
		/* Si la fenetre est fermée il ne faut pas oublier de fermer
		 * le socket au risque de laisser un port ouvert et de 
		 * ne plus pouvoir l'utiliser. On appel donc la 
		 * fontion de déconnexion et on ferme également le port
		 * le laissant disponible pour d'autres programmes 
		 */

		 /*On vérifie si un utilisateur est connecté et que le 
		  * socket a été ouvert 
		  * car si personne est connecté et qu'on essaie de
		  * fermer la liaison et qu'elle n'a jamais été ouverte
		  * => erreur
		  */

		  
		 if(socketOpen && isUserConnected)
		 {
		 	deconnexion();
		 	println("socket and user");
		 	try
			{
				socketserver.close();
			}catch(IOException serv){};
			println("ok");
		 }
		 else if(socketOpen)
		 {
		 	try
			{
				socketserver.close();
			}catch(IOException serv){};
			println("seul");
		 }		 
	}

	// Nettoyage de la zone d'affichage on remplace tout par rien
	public void clean()
	{
		textArea.setText("");
	}

	// Fonction qui change l'état des bouttons
	public void changeButton(boolean b)
	{
		deconnexion.setEnabled(b);
		send.setEnabled(b);
		fileInput.setEnabled(b);
		wizz.setEnabled(b);
	}

	// Création d'un wizz
	public void wizzz()
	{
		int originX = fenetre.getLocation().x;
		int originY = fenetre.getLocation().y;
		int x = fenetre.getLocation().x;
		int y = fenetre.getLocation().y;
		int a;
		int b;
		for(int i = 0; i < 20; i++)
		{
			Random randomGenerator = new Random();
			a = randomGenerator.nextInt(10);
			b = randomGenerator.nextInt(10);
	
			if(a % 2 == 0)
			{				
				a = a - 10;
				b = b - 10;
			}
			
			x = fenetre.getLocation().x;
			 y = fenetre.getLocation().y;
			fenetre.setLocation(x + a, y +b);
			 try
			 {
			 sleep(25);
			 }catch(InterruptedException e){}
		}
		fenetre.setLocation(originX, originY);
		
	}

	// fonction qui envoie un msg avec parametre -> surchage
	public void send(String data)
	{
		/* On recupere le flux de sortie pour envoyer un message 
		 *  précis comme close ou wizzz
		 */
		try
		{				
			out = new PrintWriter(socketduserveur.getOutputStream());
			out.println(data);
			out.flush();
		}catch(IOException e){}
	}

	// Affichage de boite de dialog
	public void displayDial(String titre, String message, int kind)
	{
		dialog.showMessageDialog(null,message , titre, kind);
	}	
}

void main()
{
<<<<<<< HEAD
	Serveur serv = new Serveur();
	if(serv.socketOpen)
		serv.start();		
}
=======
	Serveur a = new Serveur();
	a.start();
}
>>>>>>> origin/master
